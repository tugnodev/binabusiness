
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  password      String?
  image         String?
  vender        Boolean @default(false)
  createdAt     DateTime
  updatedAt     DateTime

  articles       Articles[]
  comments       Comments[]  @relation("UserComments")
  sentMsgs       Messagers[] @relation("SentMessages")
  recvMsgs       Messagers[] @relation("ReceivedMessages")
  numbers        Numbers[]
  ordersAsBuyer  Orders[]    @relation("BuyerOrders")
  ordersAsSeller Orders[]    @relation("SellerOrders")

  cards         Cards[]
  sessions      Session[]
  accounts      Account[]
  
  @@unique([email])
  @@map("user")
}

model Articles {
  id          Int      @id @default(autoincrement())
  userId      String
  name        String
  images      String
  description String
  price       Int
  stocke      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  comments Comments[]
}

model Comments {
  id        Int      @id @default(autoincrement())
  comments  String
  articleId Int
  buyerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article Articles @relation(fields: [articleId], references: [id])
  buyer   User     @relation("UserComments", fields: [buyerId], references: [id])
}

model Messagers {
  id         Int       @id @default(autoincrement())
  message    String
  senderId   String
  receiverId String
  sendedAt   DateTime  @default(now())
  readAt     DateTime?
  updatedAt  DateTime?

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Numbers {
  id       Int
  number   Int    @unique
  sellerId String

  seller User @relation(fields: [sellerId], references: [id])

  @@id([id])
}

model Orders {
  id             Int      @id @default(autoincrement())
  articleDetails Json
  buyerId        String
  sellerId       String
  orderTime      String?
  orderStatus    String   @default("init")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  buyer  User @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller User @relation("SellerOrders", fields: [sellerId], references: [id])
}

model Cards {
  id          Int    @id @default(autoincrement())
  cardDetails Json
  userId      String

  user User @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
